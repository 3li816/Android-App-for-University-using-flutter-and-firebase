import 'dart:io';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';

import './student_home_screen.dart';
import './instructor_home_screen.dart';

import '../widgets/auth_form.dart';

class AuthScreen extends StatefulWidget {
  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final _auth = FirebaseAuth.instance;
  var _isLoading = false;
  var role;
  var _errorMessage;
  void _submitAuthForm(
    String email,
    String password,
    String firstName,
    String lastName,
    String gucId,
    Role role,
    String lectureGroup,
    String major,
    String semester,
    bool isLogin,
    BuildContext ctx,
  ) async {
    UserCredential userCredential;

    try {
      setState(() {
        _isLoading = true;
      });

      if (isLogin) {
      //  print(email);
        //print(password)
        userCredential = await _auth.signInWithEmailAndPassword(
          email: email,
          password: password,
        );
      } else {
        userCredential = await _auth.createUserWithEmailAndPassword(
          email: email,
          password: password,
        );
        if (role.name == 'student') {
          //  Navigator.of(context).push(StudentHomeScreen.routeName as Route);
          await FirebaseFirestore.instance
              .collection('users')
              .doc(userCredential.user
                  .uid) // uid is the user id generated by firebase automatically
              .set({
            'userID': userCredential.user.uid,
            'firstName': firstName,
            'lastName': lastName,
            'email': email,
            'gucID': gucId,
            'major': major,
            'semester': semester,
            'lectureGroup': lectureGroup,
            'role': role.name
          });
        } else {
          await FirebaseFirestore.instance
              .collection('users')
              .doc(userCredential.user
                  .uid) // uid is the user id generated by firebase automatically
              .set({
            'userID': userCredential.user.uid,
            'firstName': firstName,
            'lastName': lastName,
            'email': email,
            'role': role.name
          });
        }
      }
    } on PlatformException catch (err) {
      var message = 'An error occurred, pelase check your credentials!';

      if (err.message != null) {
        message = err.message.toString();
      }

      Scaffold.of(ctx).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Theme.of(ctx).errorColor,
        ),
      );
      setState(() {
        _isLoading = false;
      });
    } catch (err) {
      print(err);
      setState(() {
        _isLoading = false;
        _errorMessage = err.message;
        if(_errorMessage!=null){
          ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                      backgroundColor: Colors.red,
                                      content: Text(_errorMessage)));
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('GUC Application')),
      backgroundColor: Theme.of(context).primaryColor,
      body: SingleChildScrollView(
        child: Column(
          children: [
            //Image.file("bachelor/lib/assets")
            Image(image: AssetImage('lib/assets/images/guc.png')),
            //  Image.network(
            //      'https://upload.wikimedia.org/wikipedia/commons/0/00/The_German_University_in_Cairo_Official_logo.jpg')
            //Image.asset('assets\images\guc.png')
            
            AuthForm(
              _submitAuthForm,
              _isLoading,
            ),
           // if (_errorMessage != null)               
              // AlertDialog(
              //   title: Text(_errorMessage),
              //   titleTextStyle: TextStyle(color: Colors.red),
              //   actions: [
              //     TextButton(
              //       child: Text('Dismiss'),
              //       onPressed: () {
              //         setState(() {
              //           _errorMessage = null;
              //         });
              //       },
              //     )
              //   ],
              // )
          ],
        ),
      ),
    );
  }
}
